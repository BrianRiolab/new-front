{"ast":null,"code":"import { normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-11a4d9ce\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"text-decoration-none d-flex align-items-center\"\n};\nconst _hoisted_2 = {\n  class: \"badge badge-primary rounded-circle mr-3\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"li\", {\n    class: _normalizeClass([\"list-inline-item d-flex align-items-center\", {\n      active: $options.isCurrentPage(),\n      'step-is-passed': $options.isStepPassed()\n    }]),\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.onClick && $options.onClick(...args))\n  }, [_createElementVNode(\"a\", _hoisted_1, [_createElementVNode(\"span\", _hoisted_2, [_createElementVNode(\"i\", {\n    class: _normalizeClass([\"bi\", $props.icon])\n  }, null, 2 /* CLASS */)]), _createElementVNode(\"p\", null, _toDisplayString($props.label), 1 /* TEXT */)])], 2 /* CLASS */);\n}","map":{"version":3,"mappings":";;;EASWA,KAAK,EAAC;AAAgD;;EAC/CA,KAAK,EAAC;AAAyC;;uBAT7DC,oBAcK;IAbDD,KAAK,mBAAC,4CAA4C;cACpBE,sBAAa;wBAAkCA,qBAAY;;IAIxFC,OAAK,yCAAED,6CAAO;MAEfE,oBAKI,KALJC,UAKI,GAJAD,oBAEO,QAFPE,UAEO,GADHF,oBAAsC;IAAnCJ,KAAK,mBAAC,IAAI,EAAeO,WAAI;6BAEpCH,oBAAkB,4BAAZG,YAAK","names":["class","_createElementBlock","$options","onClick","_createElementVNode","_hoisted_1","_hoisted_2","$props"],"sourceRoot":"","sources":["/opt/rdx-vitrina-front/src/views/startup/components/TopbarItem.vue"],"sourcesContent":["<template>\n    <li\n        class=\"list-inline-item d-flex align-items-center\"\n        :class=\"{\n            active: isCurrentPage(),\n            'step-is-passed': isStepPassed(),\n        }\"\n        @click=\"onClick\"\n    >\n        <a class=\"text-decoration-none d-flex align-items-center\">\n            <span class=\"badge badge-primary rounded-circle mr-3\">\n                <i class=\"bi\" v-bind:class=\"icon\"></i>\n            </span>\n            <p>{{ label }}</p>\n        </a>\n    </li>\n</template>\n\n<style scoped lang=\"scss\">\nli {\n    transition: all 0.3s ease;\n}\n\nli.step-is-passed {\n    .badge-primary {\n        background-color: black;\n        border: 1px solid black;\n        i {\n            color: white;\n        }\n    }\n}\nli.active {\n    .badge-primary {\n        background-color: black;\n        border: 1px solid black;\n        i {\n            color: white;\n        }\n    }\n    &.step-is-passed {\n        text-decoration: underline;\n        text-underline-offset: 5px;\n    }\n}\n\np {\n    margin-bottom: 0;\n}\n.badge-primary {\n    background-color: transparent;\n    border: 1px solid black;\n    // border-radius: 50%;\n    // width: 40px;\n    // height: 40px;\n    // display: inline-flex;\n    // align-items: center;\n    // justify-content: center;\n\n    // background-color: white;\n    // border: 2px solid #007bff;\n    border-radius: 50%;\n    width: 45px;\n    height: 45px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    margin-right: 10px;\n}\n\n.bi {\n    font-size: 1.5em;\n    color: black;\n}\n</style>\n<script>\nexport default {\n    data() {\n        return {};\n    },\n    props: {\n        label: {\n            type: String,\n            required: true,\n        },\n        icon: {\n            type: String,\n            required: true,\n        },\n        href: {\n            type: String,\n            required: true,\n        },\n    },\n    components: {},\n    methods: {\n        isCurrentPage() {\n            return this.$route.path === this.href;\n        },\n        isStepPassed() {\n            let number = this.href.split(\"step\")[1];\n            let currentStep = this.$route.path.split(\"step\")[1];\n\n            if (number > currentStep) {\n                return false;\n            }\n\n            return true;\n        },\n        onClick() {\n            if (this.isStepPassed()) {\n                this.$router.push(this.href);\n            }\n        },\n    },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}