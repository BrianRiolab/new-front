{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"tg-list list-group font-apercu-bold col-9 mx-auto\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_rdx_checkbox = _resolveComponent(\"rdx-checkbox\");\n  return _openBlock(), _createElementBlock(\"ul\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.interests, (interest, idx) => {\n    return _openBlock(), _createBlock(_component_rdx_checkbox, {\n      key: idx,\n      text: interest.name,\n      value: $data.local_interests_ids[interest.id],\n      \"onUpdate:value\": $event => $data.local_interests_ids[interest.id] = $event\n    }, null, 8 /* PROPS */, [\"text\", \"value\", \"onUpdate:value\"]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"mappings":";;EACQA,KAAK,EAAC;AAAmD;;;uBAA7DC,oBAOK,MAPLC,UAOK,sBANDD,oBAKWE,6BALyBC,eAAS,GAA3BC,QAAQ,EAAEC,GAAG;yBAC3BC,aAGEC;WAJ+CF,GAAG;MAE/CG,IAAI,EAAEJ,QAAQ,CAACK,IAAI;MACZC,KAAK,EAAEP,yBAAmB,CAACC,QAAQ,CAACO,EAAE;kCAA/BR,yBAAmB,CAACC,QAAQ,CAACO,EAAE","names":["class","_createElementBlock","_hoisted_1","_Fragment","$data","interest","idx","_createBlock","_component_rdx_checkbox","text","name","value","id"],"sourceRoot":"","sources":["/opt/rdx-vitrina-front/src/views/dashboard/vitrina/form/Interests.vue"],"sourcesContent":["<template>\n    <ul class=\"tg-list list-group font-apercu-bold col-9 mx-auto\">\n        <template v-for=\"(interest, idx) in interests\" :key=\"idx\">\n            <rdx-checkbox\n                :text=\"interest.name\"\n                v-model:value=\"local_interests_ids[interest.id]\"\n            />\n        </template>\n    </ul>\n</template>\n<script>\nconst body = document.getElementsByTagName(\"body\")[0];\n\nimport axios from \"axios\";\nexport default {\n    props: {\n        interests_ids: { default: [] },\n    },\n    data() {\n        return {\n            interests: [],\n            local_interests_ids: {},\n        };\n    },\n\n    components: {},\n\n    beforeCreate() {\n        this.$api.get({\n            url: [[\"/api/showcase_interest\", null]],\n            success: (resp_interest) => {\n                this.interests = resp_interest.data.results;\n                this.interests.forEach((v, idx) => {\n                    if (this.interests_ids.includes(v.id)) {\n                        this.local_interests_ids[v.id] = true;\n                    }\n                });\n            },\n            error: (err) => {\n                console.log(err);\n            },\n        });\n    },\n\n    created() {\n        body.classList.remove(\"bg-gray-100\");\n    },\n    beforeUnmount() {\n        body.classList.add(\"bg-gray-100\");\n    },\n    mounted() {},\n    methods: {},\n\n    watch: {\n        local_interests_ids: {\n            handler(newValue, oldValue) {\n                console.log(this.local_interests_ids);\n                let interests_ids = [];\n                for (const [k, v] of Object.entries(newValue)) {\n                    if (v == true) {\n                        interests_ids.push(parseInt(k));\n                    }\n                }\n                this.$emit(\"update:interests_ids\", interests_ids);\n            },\n            deep: true,\n        },\n    },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}